import { h } from '@stencil/core';
import { getIonMode } from '../../global/ionic-global';
/**
 * @virtualProp {"ios" | "md"} mode - The mode determines which platform styles to use.
 */
export class TabButton {
    constructor() {
        /**
         * The selected tab component
         */
        this.selected = false;
        /**
         * The selected tab component
         */
        this.disabled = false;
    }
    onTabBarChanged(ev) {
        this.selected = this.tab === ev.detail.tab;
    }
    onClick(ev) {
        this.selectTab(ev);
    }
    onKeyUp(ev) {
        if (ev.key === 'Enter' || ev.key === ' ') {
            this.selectTab(ev);
        }
    }
    componentWillLoad() {
        if (this.layout === undefined) {
            this.layout = this.config.get('tabButtonLayout', 'icon-top');
        }
    }
    selectTab(ev) {
        if (this.tab !== undefined) {
            if (!this.disabled) {
                this.ionTabButtonClick.emit({
                    tab: this.tab,
                    href: this.href,
                    selected: this.selected
                });
            }
            ev.preventDefault();
        }
    }
    get hasLabel() {
        return !!this.el.querySelector('ion-label');
    }
    get hasIcon() {
        return !!this.el.querySelector('ion-icon');
    }
    get tabIndex() {
        if (this.disabled) {
            return -1;
        }
        const hasTabIndex = this.el.hasAttribute('tabindex');
        if (hasTabIndex) {
            return this.el.getAttribute('tabindex');
        }
        return 0;
    }
    hostData() {
        const { disabled, hasIcon, hasLabel, tabIndex, layout, selected, tab } = this;
        const mode = getIonMode(this);
        return {
            'tabindex': tabIndex,
            'role': 'tab',
            'aria-selected': selected ? 'true' : null,
            'id': tab !== undefined ? `tab-button-${tab}` : null,
            class: {
                [`${mode}`]: true,
                'tab-selected': selected,
                'tab-disabled': disabled,
                'tab-has-label': hasLabel,
                'tab-has-icon': hasIcon,
                'tab-has-label-only': hasLabel && !hasIcon,
                'tab-has-icon-only': hasIcon && !hasLabel,
                [`tab-layout-${layout}`]: true,
                'ion-activatable': true,
                'ion-selectable': true,
                'ion-focusable': true
            }
        };
    }
    render() {
        const mode = getIonMode(this);
        const { href } = this;
        return (h("a", { href: href, tabIndex: -1 },
            h("slot", null),
            mode === 'md' && h("ion-ripple-effect", { type: "unbounded" })));
    }
    static get is() { return "ion-tab-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "ios": ["tab-button.ios.scss"],
        "md": ["tab-button.md.scss"]
    }; }
    static get styleUrls() { return {
        "ios": ["tab-button.ios.css"],
        "md": ["tab-button.md.css"]
    }; }
    static get properties() { return {
        "selected": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The selected tab component"
            },
            "attribute": "selected",
            "reflect": false,
            "defaultValue": "false"
        },
        "layout": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "TabButtonLayout",
                "resolved": "\"icon-bottom\" | \"icon-end\" | \"icon-hide\" | \"icon-start\" | \"icon-top\" | \"label-hide\" | undefined",
                "references": {
                    "TabButtonLayout": {
                        "location": "import",
                        "path": "../../interface"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Set the layout of the text and icon in the tab bar.\nIt defaults to `'icon-top'`."
            },
            "attribute": "layout",
            "reflect": false
        },
        "href": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string | undefined",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The URL which will be used as the `href` within this tab's button anchor."
            },
            "attribute": "href",
            "reflect": false
        },
        "tab": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string | undefined",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "A tab id must be provided for each `ion-tab`. It's used internally to reference\nthe selected tab or by the router to switch between them."
            },
            "attribute": "tab",
            "reflect": false
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The selected tab component"
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get contextProps() { return [{
            "name": "queue",
            "context": "queue"
        }, {
            "name": "doc",
            "context": "document"
        }, {
            "name": "config",
            "context": "config"
        }]; }
    static get events() { return [{
            "method": "ionTabButtonClick",
            "name": "ionTabButtonClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [{
                        "text": undefined,
                        "name": "internal"
                    }],
                "text": "Emitted when the tab bar is clicked"
            },
            "complexType": {
                "original": "TabButtonClickEventDetail",
                "resolved": "TabButtonClickEventDetail",
                "references": {
                    "TabButtonClickEventDetail": {
                        "location": "import",
                        "path": "../../interface"
                    }
                }
            }
        }]; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "ionTabBarChanged",
            "method": "onTabBarChanged",
            "target": "parent",
            "capture": false,
            "passive": false
        }, {
            "name": "click",
            "method": "onClick",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "keyup",
            "method": "onKeyUp",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
