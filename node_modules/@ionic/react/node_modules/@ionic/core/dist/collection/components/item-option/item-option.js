import { h } from '@stencil/core';
import { getIonMode } from '../../global/ionic-global';
import { createColorClasses } from '../../utils/theme';
/**
 * @virtualProp {"ios" | "md"} mode - The mode determines which platform styles to use.
 *
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot start - Content is placed to the left of the option text in LTR, and to the right in RTL.
 * @slot top - Content is placed above the option text.
 * @slot icon-only - Should be used on an icon in an option that has no text.
 * @slot bottom - Content is placed below the option text.
 * @slot end - Content is placed to the right of the option text in LTR, and to the left in RTL.
 */
export class ItemOption {
    constructor() {
        /**
         * If `true`, the user cannot interact with the item option.
         */
        this.disabled = false;
        /**
         * If `true`, the option will expand to take up the available width and cover any other options.
         */
        this.expandable = false;
    }
    onClick(ev) {
        const el = ev.target.closest('ion-item-option');
        if (el) {
            ev.preventDefault();
        }
    }
    hostData() {
        const mode = getIonMode(this);
        const { disabled, expandable } = this;
        return {
            class: Object.assign({}, createColorClasses(this.color), { [`${mode}`]: true, 'item-option-disabled': disabled, 'item-option-expandable': expandable, 'ion-activatable': true })
        };
    }
    render() {
        const TagType = this.href === undefined ? 'button' : 'a';
        const mode = getIonMode(this);
        return (h(TagType, { type: "button", class: "button-native", disabled: this.disabled, href: this.href },
            h("span", { class: "button-inner" },
                h("slot", { name: "top" }),
                h("div", { class: "horizontal-wrapper" },
                    h("slot", { name: "start" }),
                    h("slot", { name: "icon-only" }),
                    h("slot", null),
                    h("slot", { name: "end" })),
                h("slot", { name: "bottom" })),
            mode === 'md' && h("ion-ripple-effect", null)));
    }
    static get is() { return "ion-item-option"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "ios": ["item-option.ios.scss"],
        "md": ["item-option.md.scss"]
    }; }
    static get styleUrls() { return {
        "ios": ["item-option.ios.css"],
        "md": ["item-option.md.css"]
    }; }
    static get properties() { return {
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Color",
                "resolved": "string | undefined",
                "references": {
                    "Color": {
                        "location": "import",
                        "path": "../../interface"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics)."
            },
            "attribute": "color",
            "reflect": false
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If `true`, the user cannot interact with the item option."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "expandable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If `true`, the option will expand to take up the available width and cover any other options."
            },
            "attribute": "expandable",
            "reflect": false,
            "defaultValue": "false"
        },
        "href": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string | undefined",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered."
            },
            "attribute": "href",
            "reflect": false
        }
    }; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "click",
            "method": "onClick",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
