import { ActionSheetOptions, AlertOptions, AnimationBuilder, HTMLIonOverlayElement, IonicConfig, LoadingOptions, ModalOptions, OverlayInterface, PickerOptions, PopoverOptions, ToastOptions } from '../interface';
export declare const alertController: {
    create(options: AlertOptions): Promise<HTMLIonAlertElement>;
    dismiss(data?: any, role?: string | undefined, id?: string | undefined): Promise<boolean>;
    getTop(): Promise<HTMLIonAlertElement | undefined>;
};
export declare const actionSheetController: {
    create(options: ActionSheetOptions): Promise<HTMLIonActionSheetElement>;
    dismiss(data?: any, role?: string | undefined, id?: string | undefined): Promise<boolean>;
    getTop(): Promise<HTMLIonActionSheetElement | undefined>;
};
export declare const loadingController: {
    create(options: LoadingOptions): Promise<HTMLIonLoadingElement>;
    dismiss(data?: any, role?: string | undefined, id?: string | undefined): Promise<boolean>;
    getTop(): Promise<HTMLIonLoadingElement | undefined>;
};
export declare const modalController: {
    create(options: ModalOptions<import("../interface").ComponentRef>): Promise<HTMLIonModalElement>;
    dismiss(data?: any, role?: string | undefined, id?: string | undefined): Promise<boolean>;
    getTop(): Promise<HTMLIonModalElement | undefined>;
};
export declare const pickerController: {
    create(options: PickerOptions): Promise<HTMLIonPickerElement>;
    dismiss(data?: any, role?: string | undefined, id?: string | undefined): Promise<boolean>;
    getTop(): Promise<HTMLIonPickerElement | undefined>;
};
export declare const popoverController: {
    create(options: PopoverOptions<import("../interface").ComponentRef>): Promise<HTMLIonPopoverElement>;
    dismiss(data?: any, role?: string | undefined, id?: string | undefined): Promise<boolean>;
    getTop(): Promise<HTMLIonPopoverElement | undefined>;
};
export declare const toastController: {
    create(options: ToastOptions): Promise<HTMLIonToastElement>;
    dismiss(data?: any, role?: string | undefined, id?: string | undefined): Promise<boolean>;
    getTop(): Promise<HTMLIonToastElement | undefined>;
};
export declare function createOverlay<T extends HTMLIonOverlayElement>(tagName: string, opts: object | undefined): Promise<T>;
export declare function connectListeners(doc: Document): void;
export declare function dismissOverlay(doc: Document, data: any, role: string | undefined, overlayTag: string, id?: string): Promise<boolean>;
export declare function getOverlays(doc: Document, overlayTag?: string): HTMLIonOverlayElement[];
export declare function getOverlay(doc: Document, overlayTag?: string, id?: string): HTMLIonOverlayElement | undefined;
export declare function present(overlay: OverlayInterface, name: keyof IonicConfig, iosEnterAnimation: AnimationBuilder, mdEnterAnimation: AnimationBuilder, opts?: any): Promise<void>;
export declare function dismiss(overlay: OverlayInterface, data: any | undefined, role: string | undefined, name: keyof IonicConfig, iosLeaveAnimation: AnimationBuilder, mdLeaveAnimation: AnimationBuilder, opts?: any): Promise<boolean>;
export declare function autoFocus(containerEl: HTMLElement): HTMLElement | undefined;
export declare function eventMethod<T>(element: HTMLElement, eventName: string): Promise<T>;
export declare function onceEvent(element: HTMLElement, eventName: string, callback: (ev: Event) => void): void;
export declare function isCancel(role: string | undefined): boolean;
export declare const BACKDROP = "backdrop";
